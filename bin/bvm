#! /bin/bash

# set -e

if [[ ! $1 =~ ^[0-9]+.[0-9]+.[0-9]+$ ]]
then
  printf "Invalid version format\n"
  exit 1
fi

target_version=$1
current_version=$(bun -v 2> /dev/null || printf 'no-version')

printf "Target version: $target_version, current version: $current_version\n"

if [[ $target_version == $current_version ]]
then
  printf "Version already set !\n"
  exit 0
fi

printf "Setting wanted version\n"

if [[ $current_version != 'no-version' ]]
then
  printf "Unlink $current_version\n"
  brew unlink bun@$current_version
fi

formula_name="bun@$target_version"
printf "Formula name: $formula_name\n"

existing_version=$(brew list | grep -o $formula_name 2> /dev/null)
printf "Existing version: $existing_version\n"

if [[ ${#existing_version} > 0 ]]
then
  brew link bun@$target_version
else
  brew install bun@$target_version
fi

# version=''
# if [ $# = 0 ]
# then
#   # Get the version from package.json if defined
#   if [ -f ./package.json ]
#   then
#     package_json_version=$(cat ./package.json | jq -r '.packageManager' | grep -o "[0-9]\+\.[0-9]\+\.[0-9]\+")
#
#     if [ ! package_json_version = '' ]
#     then
#       version="v$package_json_version"
#     fi
#
#   # Get the version from .bvmrc if file exists
#   elif [ -f ./.bvmrc ]
#   then
#     version="$(cat ./.bvmrc)"
#
#   # Else default to the latest available version
#   else
#     version=$(curl -fsSL 'https://api.github.com/repos/oven-sh/bun/releases/latest' | jq -r '.name')
#   fi
#
# else
#   # If a specific version is passed as first argument, we can use it
#   version=$1
#   # TODO test match against released bun versions
# fi
#
# # Format the obtained bun version if matching the defined regex, else just set it to $version
# formatted_version=$(printf "$version" | grep -o "v[0-9]\+\.[0-9]\+\.[0-9]\+" || printf "$version")
#
# BUN_INSTALLS="$HOME/.bvm"
# # Create the `.bun-installs` folder if it does not exist
# if [ ! -d $BUN_INSTALLS ]
# then
#   mkdir $BUN_INSTALLS
# fi
#
# # Only install dowload and install a version if it is not already installed
# if [ ! -d $BUN_INSTALLS/$formatted_version ]
# then
#   printf "Installing bun $formatted_version...\n"
#   install_script=$(curl -fsSL 'https://bun.sh/install')
#   modified_install_script=$(printf "$install_script" | sed "s/\${!install_env:-\$HOME\/.bun}/\$HOME\/.bvm\/$formatted_version/")
#
#   bash <<EOF -s -- "bun-$formatted_version"
#   $modified_install_script
# EOF
# else
#   printf "Version $formatted_version already installed !\n"
# fi
#
# # Set the alias to bun binary to use the chosen version
# rm $HOME/.bun/bin/bun
# ln -s $BUN_INSTALLS/$formatted_version/bin/bun $HOME/.bun/bin/bun
# printf "Linked bun to version $formatted_version !\n"

